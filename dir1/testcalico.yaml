# k8s的容器虚拟化网络方案大体分为两种：基于隧道方案和基于路由方案
#
# 一、隧道方案
# flannel的 vxlan模式，calico的ipip模式都是隧道模式。
# 隧道模式过程
# 隧道模式分为两个过程：分配网段和封包/解包两个过程
# 分配网络
# 宿主机利用etcd（etcd中维护ip）会为当前主机上运行的容器分配一个虚拟ip，并且宿主机上运行一个代理网络进程agent，代理出入的数据包。
# 封包/解包
# 宿主上的agent进程会改变容器的发出的数据包的源ip和目的ip，目的宿主机上的agent收到数据包进行拆包然后送到目的容器。
#
# 二、路由方案
# flannel的host-gw模式，calico的bgp模式都是路由方案。
# 路由过程
# 整个路由过程分为分配网段、广播路由两个阶段
# 分配网段
# 类似隧道模式，每台宿主上的agent会从etcd中为每个容器分配一个虚ip。
# 广播路由
# agent会在宿主机上增加一套路由规则，凡是目的地址是该容器的ip的就发往容器的虚拟网卡上，同时会通过BGP广播协议将自己的虚拟ip发往集群中其他node节点，其他的node节点收到广播同样在本机创建一条路由规则：该虚拟ip的数据包发至他的宿主机ip上。
#
# 优缺点对比
# 由于隧道模式存在封包和拆包的过程而路由模式没有，所以路由模式性能高于隧道模式；
# 隧道模式通过agent代理工作在ip层而路由模型工作在mac层下；
# 路由模式会因为路由表膨胀性能下降；
#
# Flannel：host-gw模式 vxlan模式 vxlan+Directrouting模式
# Calico：BGP模式 IPIP模式 cross-subnet(对于一些主机跨子网而又无法使网络设备使用BGP的场景可以使用，实现同子网机器使用BGP模式，跨子网机器使用ipip模式。)
# Etcd：负责存储网络信息
# BGP client(BIRD)：将felix生成的路由通过BGP协议发送到网络中，并且接受其他节点通过BGP发送过来的路由，以生成全局的路由信息。
# Felix：Calico Agent，每个节点都需要运行，主要负责配置路由、配置ACLs、报告状态
# BGP Route Reflector：大规模部署时需要用到，作为BGP client的中心连接点，可以避免每个节点互联
# K8S集群运行在同网段kvm虚机上，虚机间没有网络ACL限制，因此可以设置CALICO_IPV4POOL_IPIP=off，如果你的主机位于不同网段，或者运行在公有云上需要打开这个选项 CALICO_IPV4POOL_IPIP=always

# export CALICO_DATASTORE_TYPE=kubernetes
# export CALICO_KUBECONFIG=~/.kube/config

# 使用etcd作为calico的存储，所以需要配置calicoctl连接etcd，calicoctl默认使用/etc/calico/calicoctl.cfg作为配置文件。

apiVersion: projectcalico.org/v3
kind: CalicoAPIConfig
metadata:
spec:
  datastoreType: "etcdv3"
  etcdEndpoints: https://10.124.0.61:2379,https://10.124.0.62:2379,https://10.124.0.63:2379
  etcdKeyFile: /etc/calico/ssl/calico-key.pem
  etcdCertFile: /etc/calico/ssl/calico.pem
  etcdCACertFile: /etc/kubernetes/ssl/ca.pem

  # datastoreType: "kubernetes"
  # kubeconfig: "/root/.kube/config"

# calicoctl get node
# calicoctl node status
# calicoctl get bgppeer
# calicoctl get ippool -o wide
# calicoctl get wep --all-namespace

apiVersion: projectcalico.org/v3
kind: BGPConfiguration
metadata:
  name: default
spec:
  logSeverityScreen: Info
  nodeToNodeMeshEnabled: false
  # 在集群规模比较小的情况下（100台主机以下），Calico默认使用full mesh的架构，集群节点间全互联连接，自动建立BGP邻居。
  asNumber: 64512


kind: BGPPeer
apiVersion: projectcalico.org/v3
metadata:
  name: peer-to-rrs
spec:
  # 规则1：普通 bgp node 与 rr 建立连接
  nodeSelector: "!has(i-am-a-route-reflector)"
  peerSelector: has(i-am-a-route-reflector)

---

kind: BGPPeer
apiVersion: projectcalico.org/v3
metadata:
  name: rr-mesh
spec:
  # 规则2：route reflectors 之间也建立连接
  nodeSelector: has(i-am-a-route-reflector)
  peerSelector: has(i-am-a-route-reflector)

---

apiVersion: projectcalico.org/v3
kind: Node
metadata:
  annotations:
    projectcalico.org/kube-labels: '{"beta.kubernetes.io/arch":"amd64","beta.kubernetes.io/os":"linux","kubernetes.io/arch":"amd64","kubernetes.io/hostname":"10.124.0.62","kubernetes.io/os":"linux","kubernetes.io/role":"master"}'
  creationTimestamp: null
  labels:
    beta.kubernetes.io/arch: amd64
    beta.kubernetes.io/os: linux
    kubernetes.io/arch: amd64
    kubernetes.io/hostname: 10.124.0.62
    kubernetes.io/os: linux
    kubernetes.io/role: master
    i-am-a-route-reflector: true
  name: dgvxl6775
spec:
  bgp:
    ipv4Address: 10.124.0.62/24
    ipv4IPIPTunnelAddr: 172.20.7.128
    # 设置集群ID
    routeReflectorClusterID: 224.0.0.1
  orchRefs:
  - nodeName: 10.124.0.62
    orchestrator: k8s

---

apiVersion: projectcalico.org/v3
kind: Node
metadata:
  annotations:
    projectcalico.org/kube-labels: '{"beta.kubernetes.io/arch":"amd64","beta.kubernetes.io/os":"linux","kubernetes.io/arch":"amd64","kubernetes.io/hostname":"10.124.0.63","kubernetes.io/os":"linux","kubernetes.io/role":"master"}'
  creationTimestamp: null
  labels:
    beta.kubernetes.io/arch: amd64
    beta.kubernetes.io/os: linux
    kubernetes.io/arch: amd64
    kubernetes.io/hostname: 10.124.0.63
    kubernetes.io/os: linux
    kubernetes.io/role: master
    i-am-a-route-reflector: true
  name: dgvxl6776
spec:
  bgp:
    ipv4Address: 10.124.0.63/24
    ipv4IPIPTunnelAddr: 172.20.7.128
    # 设置集群ID
    routeReflectorClusterID: 224.0.0.1
  orchRefs:
  - nodeName: 10.124.0.63
    orchestrator: k8s

apiVersion: projectcalico.org/v3
kind: BGPPeer
metadata:
  name: abcd-bgp-peer
spec:
  peerIP: 172.16.176.252
  asNumber: 65499
  # nodeSelector: zone == "dmz" #kubectl label node dgvxl7054 zone=dmz

apiVersion: projectcalico.org/v3
kind: IPPool
metadata:
   name: dmz-ippool
spec:
   cidr: 10.125.128.0/24
   ipipMode: Never
   natOutgoing: true
   nodeSelector: zone == "dmz"
